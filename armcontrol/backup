  //Initializing
  hebi::Lookup lookup;
  hebi_sleep_s(2);
  lookup.printTable();
  printf("\n");


  std::vector<std::string> names;
  names.push_back("Shoulder");
  names.push_back("elbow");
  names.push_back("Hand");
  
  std::vector<std::string> families;
  families.push_back("TeamJ");
  families.push_back("TeamJ");
  families.push_back("TeamJ");
  
  long timeout_ms = 4000;

  printf("Looking up group by name.\n");
  std::unique_ptr<hebi::Group> group;
  group = lookup.getGroupFromNames(names, families, timeout_ms);
  checkGroup(group ? group->size() : -1);
  
  //creates command module
  int num_modules = group->size();
  hebi::GroupCommand command(num_modules);

  //setup command strategy. needs testing
/*
  hebi::Command::ControlStrategy new_strategy = hebi::Command::ControlStrategy::Strategy3;
  for (int module_index = 0; module_index < num_modules; module_index++)
  {
    command[module_index].settings().actuator().controlStrategy().set(new_strategy);
  }
  group->sendCommand(command);
*/

  
  //print feedback
/*
  hebi::GroupFeedback feedback(num_modules);
  timeout_ms = 1000;
  float period_s = 0.25f;
  if (group->requestFeedback(&feedback, timeout_ms))
  {
    print_group_feedback(feedback);
  }
  else
  {
    printf("Received no feedback from group!\n");
  }
  hebi_sleep_ms(period_s * 1000);
*/  
  

  // f1 and f2 are pre determined configuration.
  // you can delete them and command input actual numbers
  // 0 for th axis one is facing forward, and -0.5pi downward.
  // for the middle axis, it is -0.125*M_PI for the left, and -1.125*M_PI for the right.
  // I haven't tried reset 0 from c++, and it may not be easy.
  // I also need to figure out setup the min/max angle for the end effector. It stops working when reaching limit, and I don't know what's the default setting
  
  //float j1[2] = {0,-0.5*M_PI};
  //float j2[2] = {-0.125*M_PI, -1.125*M_PI};
  float j2zero = -0.125*M_PI;

  
  //set every motor to position 0
  command[0].actuator().position().set(0);
  command[1].actuator().position().set(j2zero);
  command[2].actuator().position().set(0); //end effector, change to 2
  group->sendCommand(command);
  hebi_sleep_ms(100);
  
  int count = 0;
  int terminate = 0;
  float ende;
  while(terminate == 0){
	if (count>10000){
		terminate = 1;
	}
	
	
	//right now, takes input from cin.
	//I will work on taking command from reading text file
	
	/*
	std::cout << "Enter Configuration number" << std::endl;
	std::cin >> config;
	*/

	//This section sets to defined configuration, and command[0] is commented because 0 is set to the end effector now
	//command.set and then group->sendCommand(command);


	//group->sendCommand(command);
	
	std::cout << "Enter endeffector degree" << std::endl;
	std::cin >> ende;
	if (ende>10){
		terminate=1;
	}	
	else{
		command[0].actuator().position().set(ende*M_PI);
	}
	group->sendCommand(command);
	
	count++;
  }


/*
 * command with acknoledgement
  timeout_ms = 100;
  if (group->sendCommandWithAcknowledgement(command, timeout_ms))
  {
    std::cout << "Command got acknowledgement." << std::endl;
  }
  else
  {
    std::cout << "Did not receive acknowledgement for command!" << std::endl;
  }
 */
*/